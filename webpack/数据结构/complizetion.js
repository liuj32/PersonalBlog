Compiler {
  _pluginCompat:
   SyncBailHook {
     _args: [ 'options' ],
     taps: [ [Object], [Object], [Object] ],
     interceptors: [],
     call: [Function: lazyCompileHook],
     promise: [Function: lazyCompileHook],
     callAsync: [Function: lazyCompileHook],
     _x: undefined },
  hooks:
   { shouldEmit:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     done:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     additionalPass:
      AsyncSeriesHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     beforeRun:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     run:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     emit:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     assetEmitted:
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterEmit:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     thisCompilation:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     compilation:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     normalModuleFactory:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     contextModuleFactory:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     beforeCompile:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     compile:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     make:
      AsyncParallelHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterCompile:
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     watchRun:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     failed:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     invalid:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     watchClose:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     infrastructureLog:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     environment:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterEnvironment:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterPlugins:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterResolvers:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     entryOption:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     infrastructurelog:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined } },
  name: undefined,
  parentCompilation: undefined,
  outputPath: '',
  outputFileSystem:
   NodeOutputFileSystem {
     mkdirp:
      { [Function: mkdirP]
        mkdirP: [Circular],
        mkdirp: [Circular],
        sync: [Function: sync] },
     mkdir: [Function: bound mkdir],
     rmdir: [Function: bound rmdir],
     unlink: [Function: bound unlink],
     writeFile: [Function: bound writeFile],
     join: [Function: bound join] },
  inputFileSystem:
   CachedInputFileSystem {
     fileSystem: NodeJsInputFileSystem {},
     _statStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readdirStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readFileStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readJsonStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readlinkStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _stat: [Function: bound bound ],
     _statSync: [Function: bound bound ],
     _readdir: [Function: bound readdir],
     _readdirSync: [Function: bound readdirSync],
     _readFile: [Function: bound bound readFile],
     _readFileSync: [Function: bound bound readFileSync],
     _readJson: [Function],
     _readJsonSync: [Function],
     _readlink: [Function: bound bound readlink],
     _readlinkSync: [Function: bound bound readlinkSync] },
  recordsInputPath: null,
  recordsOutputPath: null,
  records: {},
  removedFiles: Set {},
  fileTimestamps: Map {},
  contextTimestamps: Map {},
  resolverFactory:
   ResolverFactory {
     _pluginCompat:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     hooks: { resolveOptions: [HookMap], resolver: [HookMap] },
     cache2: Map {} },
  infrastructureLogger: [Function: logger],
  resolvers:
   { normal:
      { plugins: [Function: deprecated],
        apply: [Function: deprecated] },
     loader:
      { plugins: [Function: deprecated],
        apply: [Function: deprecated] },
     context:
      { plugins: [Function: deprecated],
        apply: [Function: deprecated] } },
  options:
   { entry: { main: 'F:\\sui\\webpackLearn\\webpack2\\src\\main.js' },
     output:
      { filename: 'js/[name].[hash:8].js',
        path: 'F:\\sui\\webpackLearn\\webpack2\\dist',
        chunkFilename: 'js/[name].[hash:8].js',
        webassemblyModuleFilename: '[modulehash].module.wasm',
        library: '',
        hotUpdateFunction: 'webpackHotUpdate',
        jsonpFunction: 'webpackJsonp',
        chunkCallbackName: 'webpackChunk',
        globalObject: 'window',
        devtoolNamespace: '',
        libraryTarget: 'var',
        pathinfo: false,
        sourceMapFilename: '[file].map[query]',
        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
        hotUpdateMainFilename: '[hash].hot-update.json',
        crossOriginLoading: false,
        jsonpScriptType: false,
        chunkLoadTimeout: 120000,
        hashFunction: 'md4',
        hashDigest: 'hex',
        hashDigestLength: 20,
        devtoolLineToLine: false,
        strictModuleExceptionHandling: false },
     module:
      { noParse: /jquery/,
        rules: [Array],
        unknownContextRequest: '.',
        unknownContextRegExp: false,
        unknownContextRecursive: true,
        unknownContextCritical: true,
        exprContextRequest: '.',
        exprContextRegExp: false,
        exprContextRecursive: true,
        exprContextCritical: true,
        wrappedContextRegExp: /.*/,
        wrappedContextRecursive: true,
        wrappedContextCritical: false,
        strictExportPresence: false,
        strictThisContextOnImports: false,
        unsafeCache: false,
        defaultRules: [Array] },
     resolve:
      { alias: [Object],
        extensions: [Array],
        unsafeCache: true,
        modules: [Array],
        mainFiles: [Array],
        aliasFields: [Array],
        mainFields: [Array],
        cacheWithContext: false },
     externals: { jquery: 'jQuery' },
     plugins:
      [ [CleanWebpackPlugin],
        [HtmlWebpackPlugin],
        VueLoaderPlugin {},
        [MiniCssExtractPlugin],
        [HappyPlugin],
        [DllReferencePlugin],
        [CopyPlugin],
        [CopyPlugin],
        [firstPlugin] ],
     mode: 'production',
     devtool: 'cheap-module-source-map',
     optimization:
      { minimizer: [Array],
        splitChunks: [Object],
        removeAvailableModules: true,
        removeEmptyChunks: true,
        mergeDuplicateChunks: true,
        flagIncludedChunks: true,
        occurrenceOrder: true,
        sideEffects: true,
        providedExports: true,
        usedExports: true,
        concatenateModules: true,
        runtimeChunk: undefined,
        noEmitOnErrors: true,
        checkWasmTypes: true,
        mangleWasmImports: false,
        namedModules: false,
        hashedModuleIds: false,
        namedChunks: false,
        portableRecords: false,
        minimize: true,
        nodeEnv: 'production' },
     context: 'F:\\sui\\webpackLearn\\webpack2',
     cache: false,
     target: 'web',
     node:
      { console: false,
        process: true,
        global: true,
        Buffer: true,
        setImmediate: true,
        __filename: 'mock',
        __dirname: 'mock' },
     performance:
      { maxAssetSize: 250000,
        maxEntrypointSize: 250000,
        hints: 'warning' },
     resolveLoader:
      { unsafeCache: true,
        mainFields: [Array],
        extensions: [Array],
        mainFiles: [Array],
        cacheWithContext: false },
     infrastructureLogging: { level: 'info', debug: false } },
  context: 'F:\\sui\\webpackLearn\\webpack2',
  requestShortener:
   RequestShortener {
     currentDirectoryRegExp: /(^|!)F:\/sui\/webpackLearn\/webpack2/g,
     parentDirectoryRegExp: /(^|!)F:\/sui\/webpackLearn\//g,
     buildinsAsModule: true,
     buildinsRegExp:
      /(^|!)F:\/sui\/webpackLearn\/webpack2\/node_modules\/webpack/g,
     cache: Map {} },
  running: false,
  watchMode: false,
  _assetEmittingSourceCache: WeakMap { [items unknown] },
  _assetEmittingWrittenFiles: Map {},
  watchFileSystem:
   NodeWatchFileSystem {
     inputFileSystem:
      CachedInputFileSystem {
        fileSystem: NodeJsInputFileSystem {},
        _statStorage: [Storage],
        _readdirStorage: [Storage],
        _readFileStorage: [Storage],
        _readJsonStorage: [Storage],
        _readlinkStorage: [Storage],
        _stat: [Function: bound bound ],
        _statSync: [Function: bound bound ],
        _readdir: [Function: bound readdir],
        _readdirSync: [Function: bound readdirSync],
        _readFile: [Function: bound bound readFile],
        _readFileSync: [Function: bound bound readFileSync],
        _readJson: [Function],
        _readJsonSync: [Function],
        _readlink: [Function: bound bound readlink],
        _readlinkSync: [Function: bound bound readlinkSync] },
     watcherOptions: { aggregateTimeout: 200 },
     watcher:
      EventEmitter {
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        options: [Object],
        watcherOptions: [Object],
        fileWatchers: [],
        dirWatchers: [],
        mtimes: [Object: null prototype] {},
        paused: false,
        aggregatedChanges: [],
        aggregatedRemovals: [],
        aggregateTimeout: 0,
        _onTimeout: [Function: bound _onTimeout] } } }